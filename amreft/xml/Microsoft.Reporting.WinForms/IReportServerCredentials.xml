<Type Name="IReportServerCredentials" FullName="Microsoft.Reporting.WinForms.IReportServerCredentials">
  <TypeSignature Language="C#" Value="public interface IReportServerCredentials" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReportServerCredentials" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ReportViewer.WinForms</AssemblyName>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Allows objects to provide credentials to use for connecting to a report server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example shows an implementation of IReportServerCredentials.  
  
```c#  
using System;  
using System.Data;  
using System.Windows.Forms;  
using System.Security.Principal;  
using Microsoft.Reporting.WinForms;  
  
class MyCredentials : IReportServerCredentials  
{  
    public WindowsIdentity ImpersonationUser  
    {  
        get  
        {  
            return null;  
        }  
    }  
  
    public bool GetBasicCredentials(out string user, out string   
password, out string domain)  
    {  
        user = <UserName>;  
        password = <Password>;  
        domain = <DomainName>;  
        return true;  
    }  
  
    public bool GetFormsCredentials(System.Net.Cookie myCookie, out   
string user, out string password, out string authority)  
    {  
        myCookie = user = password = authority = null;  
        return false;  
    }  
}  
  
public class Demo : Form   
{  
    public Demo()  
    {  
        this.Text = "Report Control Demo";  
        this.ClientSize = new System.Drawing.Size(950, 600);  
  
        ReportViewer reportViewer = new ReportViewer();  
  
        // Set Processing Mode.  
  
        reportViewer.ProcessingMode = ProcessingMode.Remote;  
  
        // Set server info.  
  
        reportViewer.ServerReport.ReportServerUrl = new   
Uri("http://<ServerName>/reportserver");  
        reportViewer.ServerReport.ReportPath = "/Report   
Project1/Report1";  
        reportViewer.ServerReport.ReportServerCredentials = new   
MyCredentials();  
  
        // Add the reportviewer to the form.  
  
        reportViewer.Dock = DockStyle.Fill;  
        this.Controls.Add(reportViewer);  
  
        // Process and render the report.  
  
        reportViewer.RefreshReport();  
    }  
  
    [STAThread]  
    public static int Main(string[] args)   
    {  
        Application.Run(new Demo());  
        return 0;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetFormsCredentials">
      <MemberSignature Language="C#" Value="public bool GetFormsCredentials (out System.Net.Cookie authCookie, out string userName, out string password, out string authority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetFormsCredentials(class System.Net.Cookie authCookie, string userName, string password, string authority) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authCookie" Type="System.Net.Cookie&amp;" RefType="out" />
        <Parameter Name="userName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="password" Type="System.String&amp;" RefType="out" />
        <Parameter Name="authority" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="authCookie">To be added.</param>
        <param name="userName">To be added.</param>
        <param name="password">To be added.</param>
        <param name="authority">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationUser">
      <MemberSignature Language="C#" Value="public System.Security.Principal.WindowsIdentity ImpersonationUser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.WindowsIdentity ImpersonationUser" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the user to impersonate when connecting to a report server.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkCredentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials NetworkCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials NetworkCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns network credentials to be used for authentication with the report server.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>