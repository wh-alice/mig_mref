<Type Name="Report" FullName="Microsoft.Reporting.WinForms.Report">
  <TypeSignature Language="C#" Value="public abstract class Report" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Report extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ReportViewer.WinForms</AssemblyName>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(Microsoft.Reporting.WinForms.TypeNameHidingExpandableObjectConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contains methods and properties that can apply to both local and server reports.</summary>
    <remarks>&lt;!CDATA[  
  
## Remarks  
 This class is used as a base class for the &lt;xref:Microsoft.Reporting.WinForms.LocalReport&gt; and &lt;xref:Microsoft.Reporting.WinForms.ServerReport&gt; objects. For implementation-specific information, see &lt;xref:Microsoft.Reporting.WinForms.LocalReport&gt; and &lt;xref:Microsoft.Reporting.WinForms.ServerReport&gt;.  
  
 ]&gt;</remarks>
  </Docs>
  <Members>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the display name of the report.</summary>
        <value>To be added.</value>
        <remarks>&lt;!CDATA[  
  
## Remarks  
 The value of the DisplayName property will appear at the root of the document map.  
  
 The DisplayName will be used as the default file name when exporting and printing a report.  
  
 ]&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultPageSettings">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Reporting.WinForms.ReportPageSettings GetDefaultPageSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Reporting.WinForms.ReportPageSettings GetDefaultPageSettings() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WinForms.ReportPageSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the default page settings specified in the report.</summary>
        <returns>To be added.</returns>
        <remarks>&lt;!CDATA[  
  
## Remarks  
 Please see &lt;xref:Microsoft.Reporting.WinForms.LocalReport&gt; and &lt;xref:Microsoft.Reporting.WinForms.ServerReport&gt; for implementation-specific information.  
  
 ]&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDocumentMap">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WinForms.DocumentMapNode GetDocumentMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Reporting.WinForms.DocumentMapNode GetDocumentMap() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WinForms.DocumentMapNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the representation of the document map for the local report.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Reporting.WinForms.ReportParameterInfoCollection GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Reporting.WinForms.ReportParameterInfoCollection GetParameters() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WinForms.ReportParameterInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns report parameter properties for the report.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTotalPages">
      <MemberSignature Language="C#" Value="public int GetTotalPages ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTotalPages() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the total number of soft pages in the report.</summary>
        <returns>To be added.</returns>
        <remarks>&lt;!CDATA[  
  
## Remarks  
 The page count mode that is used to generate the total number of pages depends on how the report is rendered by the &lt;xref:Microsoft.Reporting.WinForms.Report&gt; object. If the report is rendered using the &lt;xref:Microsoft.Reporting.WinForms.PageCountMode&gt; mode, GetTotalPages uses the &lt;xref:Microsoft.Reporting.WinForms.PageCountMode&gt; page count mode. If the report is rendered using the &lt;xref:Microsoft.Reporting.WinForms.PageCountMode&gt; mode, GetTotalPages may use either the &lt;xref:Microsoft.Reporting.WinForms.PageCountMode&gt; or &lt;xref:Microsoft.Reporting.WinForms.PageCountMode&gt; mode depending on the report. By default, the &lt;xref:Microsoft.Reporting.WinForms.PageCountMode&gt; mode is used to calculate the page count. For more information, see the &lt;xref:Microsoft.Reporting.WinForms.PageCountMode&gt; class and the &lt;xref:Microsoft.Reporting.WinForms.Report.Render%2A&gt; method.  
  
 To retrieve the page count mode used to calculate the total number of pages, use &lt;xref:Microsoft.Reporting.WinForms.Report.GetTotalPages%2A&gt;.  
  
 When the **ReportViewer** control is in print layout mode, this method always uses the &lt;xref:Microsoft.Reporting.WinForms.PageCountMode.Actual&gt; page count mode?qualifyHint=False&amp;autoUpgrade=True.  
  
 ]&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTotalPages">
      <MemberSignature Language="C#" Value="public abstract int GetTotalPages (out Microsoft.Reporting.WinForms.PageCountMode pageCountMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetTotalPages(valuetype Microsoft.Reporting.WinForms.PageCountMode pageCountMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageCountMode" Type="Microsoft.Reporting.WinForms.PageCountMode&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pageCountMode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDrillthroughReport">
      <MemberSignature Language="C#" Value="public bool IsDrillthroughReport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDrillthroughReport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the report is a drillthrough report.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadyForRendering">
      <MemberSignature Language="C#" Value="public bool IsReadyForRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadyForRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a `Boolean` value that indicates whether a report definition and all required parameters have been specified, and all data sources are ready for use.</summary>
        <value>To be added.</value>
        <remarks>&lt;!CDATA[  
  
## Remarks  
 In remote processing mode, all prompt data source credentials must be specified for this property to be `true`. In local processing mode, all required datasets must be loaded for this property to be `true`.  
  
 This property does not indicate that all information specified is valid, but only that the &lt;xref:Microsoft.Reporting.WinForms.Report&gt; object has sufficient information to attempt to render the report. For example, it returns `true` if the prompt data source credentials have been specified but are not valid.  
  
 ]&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListRenderingExtensions">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Reporting.WinForms.RenderingExtension[] ListRenderingExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Reporting.WinForms.RenderingExtension[] ListRenderingExtensions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WinForms.RenderingExtension[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all available rendering extensions for the local report.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadReportDefinition">
      <MemberSignature Language="C#" Value="public void LoadReportDefinition (System.IO.Stream report);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadReportDefinition(class System.IO.Stream report) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="report" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="report">To be added.</param>
        <summary>Loads a report definition for processing using a &lt;xref:System.IO.Stream&gt;.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadReportDefinition">
      <MemberSignature Language="C#" Value="public abstract void LoadReportDefinition (System.IO.TextReader report);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadReportDefinition(class System.IO.TextReader report) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="report" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="report">To be added.</param>
        <summary>Loads a report definition for processing using a &lt;xref:System.IO.TextReader&gt;.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public abstract void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the report to be rendered with new data.</summary>
        <remarks>&lt;!CDATA[  
  
## Remarks  
 The Refresh method reprocesses the report and reloads the data from the report data sources.  
  
 ]&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public byte[] Render (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Render(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <summary>Processes the report and renders it in the specified format.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public byte[] Render (string format, string deviceInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Render(string format, string deviceInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="deviceInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="deviceInfo">To be added.</param>
        <summary>Processes the report and renders it in the specified format.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public byte[] Render (string format, string deviceInfo, out string mimeType, out string encoding, out string fileNameExtension, out string[] streams, out Microsoft.Reporting.WinForms.Warning[] warnings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Render(string format, string deviceInfo, string mimeType, string encoding, string fileNameExtension, string[] streams, class Microsoft.Reporting.WinForms.Warning[] warnings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="deviceInfo" Type="System.String" />
        <Parameter Name="mimeType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="encoding" Type="System.String&amp;" RefType="out" />
        <Parameter Name="fileNameExtension" Type="System.String&amp;" RefType="out" />
        <Parameter Name="streams" Type="System.String[]&amp;" RefType="out" />
        <Parameter Name="warnings" Type="Microsoft.Reporting.WinForms.Warning[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="deviceInfo">To be added.</param>
        <param name="mimeType">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="fileNameExtension">To be added.</param>
        <param name="streams">To be added.</param>
        <param name="warnings">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public abstract byte[] Render (string format, string deviceInfo, Microsoft.Reporting.WinForms.PageCountMode pageCountMode, out string mimeType, out string encoding, out string fileNameExtension, out string[] streams, out Microsoft.Reporting.WinForms.Warning[] warnings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] Render(string format, string deviceInfo, valuetype Microsoft.Reporting.WinForms.PageCountMode pageCountMode, string mimeType, string encoding, string fileNameExtension, string[] streams, class Microsoft.Reporting.WinForms.Warning[] warnings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="deviceInfo" Type="System.String" />
        <Parameter Name="pageCountMode" Type="Microsoft.Reporting.WinForms.PageCountMode" />
        <Parameter Name="mimeType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="encoding" Type="System.String&amp;" RefType="out" />
        <Parameter Name="fileNameExtension" Type="System.String&amp;" RefType="out" />
        <Parameter Name="streams" Type="System.String[]&amp;" RefType="out" />
        <Parameter Name="warnings" Type="Microsoft.Reporting.WinForms.Warning[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="deviceInfo">To be added.</param>
        <param name="pageCountMode">To be added.</param>
        <param name="mimeType">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="fileNameExtension">To be added.</param>
        <param name="streams">To be added.</param>
        <param name="warnings">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (Microsoft.Reporting.WinForms.ReportParameter parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class Microsoft.Reporting.WinForms.ReportParameter parameter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="Microsoft.Reporting.WinForms.ReportParameter" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <summary>Sets report parameter properties for the report.</summary>
        <remarks>&lt;!CDATA[  
  
## Remarks  
 The parameter specified for this method must be defined in the report definition.  
  
 ]&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public abstract void SetParameters (System.Collections.Generic.IEnumerable&lt;Microsoft.Reporting.WinForms.ReportParameter&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetParameters(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Reporting.WinForms.ReportParameter&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Reporting.WinForms.ReportParameter&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>