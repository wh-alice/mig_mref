<Type Name="ReportParameterInfo" FullName="Microsoft.Reporting.WinForms.ReportParameterInfo">
  <TypeSignature Language="C#" Value="public sealed class ReportParameterInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ReportParameterInfo extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ReportViewer.WinForms</AssemblyName>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Encapsulates information about report parameters.</summary>
    <remarks><![CDATA[  
  
## Remarks  
 The ReportParameterInfo class can be used to determine parameter requirements for a report at runtime.  
  
   
  
## Examples  
 The following code sample assumes a WinForms application with a ReportViewer control. The code programmatically loads a sample report from the report server and iterates through the parameters encapsulated in the <xref:Microsoft.Reporting.WinForms.ReportParameterInfoCollection> property of the <xref:Microsoft.ReportingServices.ServerReport> object, showing information about each report parameter.  
  
 [C#]  
  
```  
using System;  
using System.Collections.Generic;  
using System.ComponentModel;  
using System.Data;  
using System.Drawing;  
using System.Text;  
using System.Windows.Forms;  
using Microsoft.Reporting.WinForms;  
  
namespace ParamSample  
{  
    public partial class Form1 : Form  
    {  
        public Form1()  
        {  
            InitializeComponent();  
        }  
  
        private void Form1_Load(object sender, EventArgs e)  
        {  
  
            // Set Processing Mode  
            reportViewer1.ProcessingMode = ProcessingMode.Remote;  
  
            // Set report server and report path  
            reportViewer1.ServerReport.ReportServerUrl = new  
            Uri("http://localhost/reportserver");  
            reportViewer1.ServerReport.ReportPath =   
               "/AdventureWorks Sample Reports/Employee Sales Summary";  
  
            // Display the parameters for this report  
            DumpParameterInfo(reportViewer1.ServerReport);  
  
            // Set the parameters for this report  
            List<ReportParameter> paramList = new List<ReportParameter>();  
  
            paramList.Add(new ReportParameter("EmpID", "288", false));  
            paramList.Add(new ReportParameter("ReportMonth", "12", false));  
            paramList.Add(  
               new ReportParameter("ReportYear", "2003", false));  
  
            this.reportViewer1.ServerReport.SetParameters(paramList);  
  
            // Process and render the report  
            reportViewer1.RefreshReport();  
  
        }  
  
        public void DumpParameterInfo(ServerReport sReport)  
        {  
            ReportParameterInfoCollection pInfo = sReport.GetParameters();  
  
            if (pInfo.Count == 0)  
            {  
                Console.WriteLine("<No parameters are defined for this report>");  
            }  
            else  
            {  
                Console.WriteLine("===========================================================================");  
                Console.WriteLine("Parameter Info for " + sReport.ReportPath);  
  
                foreach (ReportParameterInfo p in pInfo)  
                {  
                    Console.WriteLine("----------------------------------------------------------------------");  
                    Console.WriteLine("Parameter Name: {0}", p.Name);  
                    Console.WriteLine("Data Type: {0}", p.DataType);  
                    Console.WriteLine("State: {0}", p.State);  
                    Console.WriteLine("Allow Blank? {0}", p.AllowBlank);  
                    Console.WriteLine("Nullable? {0}", p.Nullable);  
                    Console.WriteLine("Prompt User? {0}", p.PromptUser);  
                    Console.WriteLine("User Prompt: {0}", p.Prompt);  
                    Console.WriteLine("Visible? {0}", p.Visible);  
                    Console.WriteLine("MultiValued? {0}", p.MultiValue);  
                    Console.WriteLine("Default values query-based? {0}", p.AreDefaultValuesQueryBased);  
                    Console.Write("Default value(s): ");  
  
                    // Show a list of default values for the report params  
                    IList<string> dvList = p.Values;  
                    int t;  
  
                    if (dvList.Count != 0)  
                    {  
  
                        t = 1;  
  
                        foreach (string dv in dvList)  
                        {  
                            if (t != dvList.Count)  
                            {  
                                t++;  
                                Console.Write(dv + ", ");  
                            }  
                            else  
                            {  
                                if (t == 1)  
                                    Console.WriteLine(dv);  
                                else  
                                    Console.WriteLine("or " + dv);  
                            }  
                        }  
                    }  
                    else  
                    {  
                        Console.WriteLine("<no default values defined>");  
                    }  
  
                    Console.WriteLine("Valid values query based? {0}", p.AreValidValuesQueryBased);  
                    Console.Write("Valid values: ");  
  
                    // Show a list of valid values for the report params  
  
                    IList<ValidValue> vvList = p.ValidValues;  
  
                    if (vvList != null)  
                    {  
  
                        t = 1;  
  
                        foreach (ValidValue vv in vvList)  
                        {  
                            if (t != vvList.Count)  
                            {  
                                t++;  
                                Console.Write(vv.Value + ", ");  
                            }  
                            else  
                            {  
                                if (t == 1)  
                                    Console.WriteLine(vv.Value);  
                                else  
                                    Console.WriteLine("or " + vv.Value);  
                            }  
                        }  
                    }  
                    else  
                    {  
                        Console.WriteLine("<no valid values defined>");  
                    }  
  
                    Console.Write("Dependent parameters: ");  
  
                    ReportParameterInfoCollection dpInfo = p.Dependencies;  
                    t = 1;  
  
                    if (dpInfo.Count != 0)  
                    {  
  
                        foreach (ReportParameterInfo dp in dpInfo)  
                        {  
                            if (t != dpInfo.Count)  
                            {  
                                t++;  
                                Console.Write(dp.Name + ", ");  
                            }  
                            else  
                            {  
                                if (t == 1)  
                                    Console.WriteLine(dp.Name);  
                                else  
                                    Console.WriteLine("or " + dp.Name);  
                            }  
                        }  
                    }  
                    else  
                    {  
                        Console.WriteLine("<no dependent parameters defined>");  
                    }  
  
                }  
  
            }  
            Console.WriteLine("----------------------------------------------------------------------");  
        }  
    }  
}  
```  
  
 ]]></remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowBlank">
      <MemberSignature Language="C#" Value="public bool AllowBlank { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowBlank" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether an empty string is a valid value for the parameter. Read-only.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 The AllowBlank property is ignored if the value of the <xref:Microsoft.Reporting.WinForms.ReportParameterInfo.DataType%2A> property is not a string.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="AreDefaultValuesQueryBased">
      <MemberSignature Language="C#" Value="public bool AreDefaultValuesQueryBased { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreDefaultValuesQueryBased" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the default values of the parameter are based on a query. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreValidValuesQueryBased">
      <MemberSignature Language="C#" Value="public bool AreValidValuesQueryBased { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AreValidValuesQueryBased" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the parameter's valid values are based on a query. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WinForms.ParameterDataType DataType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Reporting.WinForms.ParameterDataType DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WinForms.ParameterDataType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data type of the parameter. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependencies">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WinForms.ReportParameterInfoCollection Dependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Reporting.WinForms.ReportParameterInfoCollection Dependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WinForms.ReportParameterInfoCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a list of parameters whose values are used to retrieve additional parameter values in a query. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dependents">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WinForms.ReportParameterInfoCollection Dependents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Reporting.WinForms.ReportParameterInfoCollection Dependents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WinForms.ReportParameterInfoCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A list of parameters that use the value of this parameter as parameters into queries to retrieve &lt;xref:Microsoft.Reporting.WinForms.ReportParameterInfo.ValidValues%2A&gt; and/or &lt;xref:Microsoft.SqlServer.ReportingServices.ReportParameter.DefaultValues&gt;.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorMessage">
      <MemberSignature Language="C#" Value="public string ErrorMessage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the error message that is returned when the parameter fails validation. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueryParameter">
      <MemberSignature Language="C#" Value="public bool IsQueryParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQueryParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the parameter is used in a query to an external data source. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiValue">
      <MemberSignature Language="C#" Value="public bool MultiValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the parameter can be a multi-value parameter. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the parameter. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Nullable">
      <MemberSignature Language="C#" Value="public bool Nullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Nullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the value of the parameter can be `null`. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The text that prompts the user to provide parameter values.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 The default value for the Prompt property is retrieved from the report definition.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptUser">
      <MemberSignature Language="C#" Value="public bool PromptUser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PromptUser" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates whether the user is prompted for the value of the parameter.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WinForms.ParameterState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Reporting.WinForms.ParameterState State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WinForms.ParameterState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Describes the state of the parameter. Read-only.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 The value of the property may change based on input used during the validation of the parameter through the use of the <xref:Microsoft.Reporting.WinForms.Report.GetParameters%2A> method.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.Reporting.WinForms.ValidValue&gt; ValidValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.Reporting.WinForms.ValidValue&gt; ValidValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Reporting.WinForms.ValidValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the available valid values for the parameter. Read-only.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 You can display the valid values of a parameter to the user in a user interface.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the values for the parameter.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether the parameter can be displayed in the user interface.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 If Visible is set to `false`, the <xref:Microsoft.Reporting.WinForms.ReportParameterInfo.PromptUser%2A> property is overridden.  
  
 If Visible is set to `true`, a prompt is displayed in the user interface if <xref:Microsoft.Reporting.WinForms.ReportParameterInfo.PromptUser%2A> is also set to `true`.  
  
 ]]></remarks>
      </Docs>
    </Member>
  </Members>
</Type>