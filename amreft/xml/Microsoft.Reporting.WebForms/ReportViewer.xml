<Type Name="ReportViewer" FullName="Microsoft.Reporting.WebForms.ReportViewer">
  <TypeSignature Language="C#" Value="public class ReportViewer : System.Web.UI.WebControls.CompositeControl, System.Web.UI.IScriptControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReportViewer extends System.Web.UI.WebControls.CompositeControl implements class System.Web.UI.IScriptControl" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ReportViewer.WebForms</AssemblyName>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.CompositeControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IScriptControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.Reporting.WebForms.ReportViewerDesigner, Microsoft.ReportViewer.WebDesign, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encapsulates the methods and properties used for the **ReportViewer** control.</summary>
    <remarks><![CDATA[  
  
## Remarks  
 This control shows the report and its associated user interface.  
  
 The control can work in either local or remote processing mode. In local processing mode, the control processes and renders the report locally. In remote processing mode, processing is done on a report server and displayed locally. The remote processing mode requires a Microsoft SQL Server 2008 or later instance of report server.  
  
> [!NOTE]
>  For more information about using the **ReportViewer** Web server control in a Web farm or without session state, see [Web.config Settings for ReportViewer](../Topic/Web.config%20Settings%20for%20ReportViewer.md).  
  
 For information on using the client-side ReportViewer control using the client-side API, see [ReportViewer Class](../../../../../../H:\Enlist\mig_mref\amreft\xml\Microsoft.Reporting.WebForms\ReportViewer.xml).  
  
 ]]></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReportViewer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:Microsoft.Reporting.WebForms.ReportViewer"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncRendering">
      <MemberSignature Language="C#" Value="public bool AsyncRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a `Boolean` value that indicates whether the report is rendered asynchronously from the rest of the Web page when the Web page is being loaded.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 After the report is rendered on page load, this property no longer determines the report rendering behavior. By default, all subsequent report renderings are accomplished with AJAX partial-page updates through asynchronous postbacks, and changing this property has no effect. For more information on partial-page updates and asynchronous postbacks, see [Partial-Page Rendering Overview](../Topic/Partial-Page%20Rendering%20Overview.md).  
  
 To control the asynchronous postback behavior, use the <xref:Microsoft.Reporting.WebForms.ReportViewer.%2A> InteractivityPostBackMode?qualifyHint=False&autoUpgrade=True property.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="Back">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.BackEventHandler Back;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.BackEventHandler Back" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.BackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a user navigates from a drillthrough report back to the parent report.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when the user moves from a drillthrough report back to the parent report. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.BackEventArgs> object to the <xref:Microsoft.Reporting.WebForms.BackEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "#ECE9D8")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of the control's report area.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BookmarkNavigation">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.BookmarkNavigationEventHandler BookmarkNavigation;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.BookmarkNavigationEventHandler BookmarkNavigation" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.BookmarkNavigationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a user browses to a bookmark in a report.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when a user browses to a bookmark in the report. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.BookmarkNavigationEventArgs> object to the <xref:Microsoft.Reporting.WebForms.BookmarkNavigationEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called by the ASP.NET page framework to notify the **ReportViewer** control to create any child controls it contain in preparation for posting back or rendering.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the style object that is used internally by the control to implement all style related properties.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentPage">
      <MemberSignature Language="C#" Value="public int CurrentPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the current page of the **ReportViewer** control's active report.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all the resources used by the &lt;see cref="T:Microsoft.Reporting.WebForms.ReportViewer"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentMapCollapsed">
      <MemberSignature Language="C#" Value="public bool DocumentMapCollapsed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DocumentMapCollapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the collapsed state of the document map.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentMapNavigation">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.DocumentMapNavigationEventHandler DocumentMapNavigation;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.DocumentMapNavigationEventHandler DocumentMapNavigation" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.DocumentMapNavigationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a document map node is selected.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when a document map node is selected. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.DocumentMapNavigationEventArgs> object to the <xref:Microsoft.Reporting.WebForms.DocumentMapNavigationEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentMapWidth">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Unit DocumentMapWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit DocumentMapWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.WebControls.Unit), "25%")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the document map.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Drillthrough">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.DrillthroughEventHandler Drillthrough;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.DrillthroughEventHandler Drillthrough" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.DrillthroughEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a drillthrough item is selected.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when a drillthrough item is selected. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.DrillThroughEventArgs> object to the <xref:Microsoft.Reporting.WebForms.DrillThroughEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 The following code example loads a sample report containing a series of drillthrough items and sets up an event handler to handle the drillthrough events. The arguments passed to the drillthrough event handler include a drillthrough report object. The event handler adds a data source to this report before the drillthrough report is rendered in the **ReportViewer** control.  
  
```vb#  
Imports System.Data  
Imports Microsoft.Reporting.WebForms  
  
Partial Class _Default  
    Inherits System.Web.UI.Page  
  
    Private Function LoadEmployeesData() As DataTable  
        Dim dataSet As New DataSet()  
        dataSet.ReadXml("c:\My Reports\employees.xml")  
        LoadEmployeesData = dataSet.Tables(0)  
    End Function  
  
    Private Function LoadDepartmentsData()  
        Dim dataSet As New DataSet()  
        dataSet.ReadXml("c:\My Reports\departments.xml")  
        LoadDepartmentsData = dataSet.Tables(0)  
    End Function  
  
    Public Sub DemoDrillthroughEventHandler(ByVal sender As Object, ByVal e As DrillthroughEventArgs)  
        Dim localReport = e.Report  
        localReport.DataSources.Add(New ReportDataSource("Employees", LoadEmployeesData()))  
    End Sub  
  
    Private Sub Form1_Init(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Init  
  
        If (Not IsPostBack) Then  
  
            ' Set RDL file.  
            ReportViewer1.LocalReport.ReportPath = "c:\My Reports\Departments.rdlc"  
  
            ' Supply a DataTable corresponding to each report data source.  
            Dim myReportDataSource = New ReportDataSource("Departments", LoadDepartmentsData())  
            ReportViewer1.LocalReport.DataSources.Add(myReportDataSource)  
        End If  
  
        'Add a handler for drillthrough.  
        AddHandler ReportViewer1.Drillthrough, AddressOf DemoDrillthroughEventHandler  
  
    End Sub  
End Class  
```  
  
```c#  
using System;  
using System.Data;  
using System.Configuration;  
using System.Web;  
using System.Web.Security;  
using System.Web.UI;  
using System.Web.UI.WebControls;  
using System.Web.UI.WebControls.WebParts;  
using System.Web.UI.HtmlControls;  
using Microsoft.Reporting.WebForms;  
  
public partial class _Default : System.Web.UI.Page   
{  
        private DataTable LoadEmployeesData()  
        {  
            DataSet dataSet = new DataSet();  
            dataSet.ReadXml(@"c:\My Reports\employees.xml");  
            return dataSet.Tables[0];  
        }  
  
        private DataTable LoadDepartmentsData()  
        {  
            DataSet dataSet = new DataSet();  
            dataSet.ReadXml(@"c:\My Reports\departments.xml");  
            return dataSet.Tables[0];  
        }  
  
        void DemoDrillthroughEventHandler(object sender, DrillthroughEventArgs e)  
        {  
            LocalReport localReport = (LocalReport)e.Report;  
            localReport.DataSources.Add(new ReportDataSource("Employees",  
                LoadEmployeesData()));  
        }  
  
    protected void Page_Init(object sender, EventArgs e)  
    {  
  
        if (!IsPostBack)  
            {  
            // On initial page load  
            ReportViewer1.LocalReport.ReportPath = @"c:\My Reports\Departments.rdlc";  
  
            // Supply a DataTable corresponding to each report data source.  
            ReportViewer1.LocalReport.DataSources.Add(  
                new ReportDataSource("Departments", LoadDepartmentsData()));  
            }  
  
        // Add the handler for drillthrough.  
        ReportViewer1.Drillthrough += new DrillthroughEventHandler(DemoDrillthroughEventHandler);  
  
    }  
}  
```  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportContentDisposition">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.ContentDisposition ExportContentDisposition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Reporting.WebForms.ContentDisposition ExportContentDisposition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ContentDisposition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether content should be present in-line or as an attachment.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 Valid values are `AlwaysAttachment`, `AlwayInline`, or `OnlyHtmlInline`.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public void Find (string searchText, int startPage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Find(string searchText, int32 startPage) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchText" Type="System.String" />
        <Parameter Name="startPage" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="searchText">To be added.</param>
        <param name="startPage">To be added.</param>
        <summary>Searches the report in the report area for the specified text string, starting from the specified page number.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPageSettings">
      <MemberSignature Language="C#" Value="public System.Drawing.Printing.PageSettings GetPageSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Printing.PageSettings GetPageSettings() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Printing.PageSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the page settings that are used to print the current report in the **ReportViewer** control.</summary>
        <returns>To be added.</returns>
        <remarks><![CDATA[  
  
## Remarks  
 By default, the **ReportViewer** control uses the page settings specified in the report definition when printing the current report. Modifying the page settings by changing the properties of the returned <xref:System.Drawing.Printing.PageSettings> object has no effect. To modify page settings, you must use the <xref:Microsoft.Reporting.WebForms.ReportViewer.SetPageSettings%2A> method.  
  
 The returned page settings only apply to the current report in the **ReportViewer** control, and do not apply to its parent report or the drillthrough reports accessible from it.  
  
 To find out whether the report area contains a report, use the <xref:Microsoft.Reporting.WebForms.ReportViewer.ReportAreaContentType%2A> property.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.Unit Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.WebControls.Unit), "400px")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the height of the control.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 For more information, see <xref:System.Web.UI.WebControls.WebControl.Height%2A?displayProperty=fullName>.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="HyperlinkTarget">
      <MemberSignature Language="C#" Value="public string HyperlinkTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HyperlinkTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("_top")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the target window or frame for the Web page content that is returned when a hyperlink in the report is clicked.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ID">
      <MemberSignature Language="C#" Value="public override string ID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the ID of the control.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 For more information, see <xref:System.Web.UI.Control.ID%2A?displayProperty=fullName>.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="InteractiveDeviceInfos">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.DeviceInfoCollection InteractiveDeviceInfos { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Reporting.WebForms.DeviceInfoCollection InteractiveDeviceInfos" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.DeviceInfoCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;see cref="T:Microsoft.Reporting.WebForms.DeviceInfoCollection"&gt; object that the **ReportViewer** control uses to render the report in the report area as HTML.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 You can add or remove device information settings in the InteractiveDeviceInfos property to specify how the report should be rendered in the report area. Device information settings in the property applies apply only to the report that is rendered in the report area. It doesThey do not apply to the **Export** function in the **ReportViewer** user interface. For example, it doesthey do not apply to a server report that you export in MHTML format using the **Export** user interface.  
  
 Certain device information settings, such as `PrefixId` and `HTMLFragment`, are set by the **ReportViewer** control and cannot be overridden, and certain settings can be set directly through member properties or methods in the **ReportViewer** control. For example, the `Section` setting can be set using the <xref:Microsoft.Reporting.WebForms.ReportViewer.CurrentPage%2A> property, and the `LinkTarget` setting can be set using the <xref:Microsoft.Reporting.WebForms.ReportViewer.HyperlinkTarget%2A>. If you try to add such settings to the collection, the **ReportViewer** control throws an <xref:System.ArgumentException>. For more information, see [HTML Device Information Settings](http://msdn.microsoft.com/en-us/f505f478-dd6d-444a-957c-34f7cfb98911).  
  
   
  
## Examples  
 The following example adds the AccessibleTablix device information to the InteractiveDeviceInfos collection in order to generate additional HTML mark-up for tablices in rendered reports.  
  
```c#  
this.ReportViewer1.InteractiveDeviceInfos.Add("AccessibleTablix", "true");  
```  
  
```vb  
Me.ReportViewer1.InteractiveDeviceInfos.Add("AccessibleTablix", "true")  
```  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="InteractivityPostBackMode">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.InteractivityPostBackMode InteractivityPostBackMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Reporting.WebForms.InteractivityPostBackMode InteractivityPostBackMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.InteractivityPostBackMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an &lt;see cref="T:Microsoft.Reporting.WebForms.InteractivityPostBackMode"&gt; value that indicates the postback mode of the &lt;xref:Microsoft.Reporting.WebForms.ReportViewer&gt; control.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 For more information, see <xref:Microsoft.Reporting.WebForms.InteractivityPostBackMode>.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalBorderColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color InternalBorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color InternalBorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "#CCCCCC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the internal border color of the control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalBorderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.BorderStyle InternalBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.BorderStyle InternalBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the internal border style of the control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalBorderWidth">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Unit InternalBorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit InternalBorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.WebControls.Unit), "1px")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the internal border of the control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JumpToBookmark">
      <MemberSignature Language="C#" Value="public void JumpToBookmark (string bookmarkId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JumpToBookmark(string bookmarkId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bookmarkId">To be added.</param>
        <summary>Moves the focus of the report to the specified bookmark.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JumpToDocumentMapId">
      <MemberSignature Language="C#" Value="public void JumpToDocumentMapId (string documentMapId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JumpToDocumentMapId(string documentMapId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentMapId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="documentMapId">To be added.</param>
        <summary>Moves the focus of the document map to the specified node.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepSessionAlive">
      <MemberSignature Language="C#" Value="public bool KeepSessionAlive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepSessionAlive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a `Boolean` value that indicates whether to keep the user session from expiring as long as the Web page is displayed in the browser.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 Setting this property to `true` causes the **ReportViewer** control to keep the ASP.NET session from expiring if session is enabled in your ASP.NET application. Also, in remote processing mode, it causes the **ReportViewer** control to keep the report server session from expiring.  
  
 If you want to keep a session active for a user even when there is no activity on their part, set KeepSessionAlive to `true`.  
  
 In both local and remote processing modes, the **ReportViewer** control pings the Web server to keep the ASP.NET session active if ASP.NET session is enabled.  
  
 If you set KeepSessionAlive to `false`, the user session is kept active as long as the user interacts with the Web page. The user session will expire after a period of inactivity in the Web page. If the ASP.NET session expires, the message "ASP.NET session has expired or could not be found" is displayed when the user interacts with the **ReportViewer** again. If the report server session expires, the rsExecutionNotFound error is thrown when user interacts with the **ReportViewer** again.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkActiveColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkActiveColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkActiveColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "#3366CC")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of an active link in the control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkActiveHoverColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkActiveHoverColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkActiveHoverColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "#FF3300")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of the active link in the control while the mouse pointer is over the link.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkDisabledColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkDisabledColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkDisabledColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "Gray")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color of a disabled link in the control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">To be added.</param>
        <summary>Restores view-state information from a previous request that was saved with the &lt;xref:Microsoft.Reporting.WebForms.ReportViewer.SaveViewState%2A&gt; method.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalReport">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.LocalReport LocalReport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Reporting.WebForms.LocalReport LocalReport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.LocalReport</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the instance of the &lt;see cref="T:Microsoft.Reporting.WebForms.Report"&gt; class that is used when the &lt;xref:Microsoft.Reporting.WebForms.ReportViewer.ProcessingMode%2A&gt; for the &lt;xref:Microsoft.Reporting.WebForms.ReportViewer&gt; control is set to &lt;xref:Microsoft.Reporting.WebForms.ProcessingMode&gt;.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Examples  
 See <xref:Microsoft.Reporting.WebForms.LocalReport> for a code example.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumPageCount">
      <MemberSignature Language="C#" Value="public const int MaximumPageCount = 2147483647;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 MaximumPageCount = (2147483647)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>2147483647</MemberValue>
      <Docs>
        <summary>A constant that represents the maximum number of pages in a report when the current page count mode is &lt;see cref="T:Microsoft.Reporting.WebForms.PageCountMode"&gt;.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 Use MaximumPageCount to specify the last page of a report even when you do not have the maximum page count.  
  
 To navigate to the last page of a report when the current page count mode is <xref:Microsoft.Reporting.WebForms.PageCountMode>, set the <xref:Microsoft.Reporting.WebForms.ReportViewer.CurrentPage%2A> property to MaximumPageCount. If you do this in <xref:Microsoft.Reporting.WebForms.PageCountMode> mode, the **ReportViewer** throws an <xref:System.InvalidOperationException>.  
  
 Certain operations cause the **ReportViewer** control to calculate the actual total number of pages, such as exporting a report or navigating to the last page of the report. Before setting the <xref:Microsoft.Reporting.WebForms.ReportViewer.CurrentPage%2A> property to MaximumPageCount, you should verify that the current page count is an estimated page count by using the <xref:Microsoft.Reporting.WebForms.Report.GetTotalPages%2A> method in the <xref:Microsoft.Reporting.WebForms.ReportViewer.LocalReport%2A> or <xref:Microsoft.Reporting.WebForms.ReportViewer.ServerReport%2A> object.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>Raises the `Init` event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>Raises the `PreRender` event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PageCountMode">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.PageCountMode PageCountMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Reporting.WebForms.PageCountMode PageCountMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.PageCountMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a &lt;see cref="T:Microsoft.Reporting.WebForms.PageCountMode"&gt; enumeration value that indicates the default page count mode to use when rendering a report in the report area.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 Set PageCountMode to control how to calculate the total number of pages when rendering a report in the report area. When PageCountMode is <xref:Microsoft.Reporting.WebForms.PageCountMode>, the **ReportViewer** control displays the actual total number of pages in the toolbar. When PageCountMode is <xref:Microsoft.Reporting.WebForms.PageCountMode>, the **ReportViewer** control may calculate either the actual total or an estimated total, depending on the report. When the calculated value is an estimated total, it is followed by an estimate indicator in the toolbar, and the displayed value may change as the user navigates through report pages.  
  
> [!NOTE]
>  Using estimated page counts can help improve the performance of the **ReportViewer** control when rendering reports.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="PageNavigation">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.PageNavigationEventHandler PageNavigation;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.PageNavigationEventHandler PageNavigation" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.PageNavigationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a user moves to a different page in a report.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when a user moves to a different page in a report. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.PageNavigationEventArgs> object to the <xref:Microsoft.Reporting.WebForms.PageNavigationEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformBack">
      <MemberSignature Language="C#" Value="public void PerformBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformBack() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Navigates the **ReportViewer** control back to the parent report from a drillthrough report.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This method does not raise the <xref:Microsoft.Reporting.WebForms.ReportViewer.Back> event when called.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessingMode">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.ProcessingMode ProcessingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Reporting.WebForms.ProcessingMode ProcessingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ProcessingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the processing mode of the **ReportViewer** control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptAreaCollapsed">
      <MemberSignature Language="C#" Value="public bool PromptAreaCollapsed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PromptAreaCollapsed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the collapsed state of the parameter prompt area or the credentials prompt area.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>Registers the specified control with the **ReportViewer** control. The **ReportViewer** control displays the wait control when the registered control causes a postback.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 By default, theThe **ReportViewer** control shows the wait control only when it determines that a postback is caused by the **ReportViewer** control itself. Registering your custom control using this method allows you to cause the wait control to be displayed as a result of an action on the custom control. This method registers the specified control and all the child controls that it contains.  
  
 To enable and disable your custom control, you should subscribe to a property change event for the  client-side property to be notified when the **ReportViewer** postback starts and ends. For more information on how to use the client-side control, see [ReportViewer Class](../../../../../../H:\Enlist\mig_mref\amreft\xml\Microsoft.Reporting.WebForms\ReportViewer.xml).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>Renders the control to the specified HTML writer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportAreaContentType">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.ReportAreaContent ReportAreaContentType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Reporting.WebForms.ReportAreaContent ReportAreaContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportAreaContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a &lt;see cref="T:Microsoft.Reporting.WebForms.ReportAreaContent"&gt; object that indicates the current content type of the report area.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 You can use this property to check whether the report area contains a report.  
  
 The **ReportViewer** control changes the value of this property during the life cycle of the ASP.NET page. Before the `ReportViewer.PreRender` event has completed, this property may be set to <xref:Microsoft.Reporting.WebForms.ReportAreaContent>. Its value is finalized after the `ReportViewer.PreRender` event.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportError">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.ReportErrorEventHandler ReportError;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.ReportErrorEventHandler ReportError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an error is found in the report.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event is raised when an error occurs in the report. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.ReportErrorEventArgs> object to the <xref:Microsoft.Reporting.WebForms.ReportErrorEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportRefresh">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler ReportRefresh;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler ReportRefresh" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the report is refreshed.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when the report is refreshed. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.ReportRefreshEventArgs> object to the <xref:Microsoft.Reporting.WebForms.ReportRefreshEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resets the control to its default values.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 Call the Reset method to reset the <xref:Microsoft.Reporting.WebForms.ReportViewer> control to its default state.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetPageSettings">
      <MemberSignature Language="C#" Value="public void ResetPageSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetPageSettings() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reverts the page settings for the current report in the **ReportViewer** control to the settings in the report definition.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 Only the changes you made to the current in the **ReportViewer** control are reverted, and calling this method does not affect its parent report or the drillthrough reports accessible from it.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the view state information of the **ReportViewer** control.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Search">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.SearchEventHandler Search;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.SearchEventHandler Search" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.SearchEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the **Find** or **Find Next** button is clicked, or when a search operation is invoked programmatically.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.SearchEventArgs> object to the <xref:Microsoft.Reporting.WebForms.SearchEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchState">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.SearchState SearchState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Reporting.WebForms.SearchState SearchState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.SearchState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the search text and the start page of the current report search operation.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerReport">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.ServerReport ServerReport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Reporting.WebForms.ServerReport ServerReport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ServerReport</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the instance of the &lt;see cref="T:Microsoft.Reporting.WebForms.Report"&gt; class that is used when the &lt;xref:Microsoft.Reporting.WebForms.ReportViewer.ProcessingMode%2A&gt; for the &lt;xref:Microsoft.Reporting.WebForms.ReportViewer&gt; control is set to &lt;xref:Microsoft.Reporting.WebForms.ProcessingMode&gt;.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Examples  
 See <xref:Microsoft.Reporting.WebForms.ServerReport> for a code example.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPageSettings">
      <MemberSignature Language="C#" Value="public void SetPageSettings (System.Drawing.Printing.PageSettings pageSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPageSettings(class System.Drawing.Printing.PageSettings pageSettings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageSettings" Type="System.Drawing.Printing.PageSettings" />
      </Parameters>
      <Docs>
        <param name="pageSettings">To be added.</param>
        <summary>Sets the page settings that are used to print the current report in the **ReportViewer** control.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 By default, the **ReportViewer** control uses the page settings specified in the report definition when printing the current report. Use this method to change the page settings for the current report (not the current page), such as margins or paper size. This method validates the margin and page size values in the `pageSettings` parameter. Note that the change only affects the current report in the **ReportViewer** control, and does not affect its parent report or the drillthrough reports accessible from it.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowBackButton">
      <MemberSignature Language="C#" Value="public bool ShowBackButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowBackButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the **Back** button is visible on the toolbar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCredentialPrompts">
      <MemberSignature Language="C#" Value="public bool ShowCredentialPrompts { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowCredentialPrompts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether to display a prompt for user credentials.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 This property is ignored when <xref:Microsoft.Reporting.WebForms.ReportViewer.ProcessingMode%2A> is set to `Local`.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDocumentMapButton">
      <MemberSignature Language="C#" Value="public bool ShowDocumentMapButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowDocumentMapButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the button that shows and collapses the document map is visible on the split bar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowExportControls">
      <MemberSignature Language="C#" Value="public bool ShowExportControls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowExportControls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the **Export** control is visible on the toolbar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowFindControls">
      <MemberSignature Language="C#" Value="public bool ShowFindControls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFindControls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the **Find** text box is visible on the toolbar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPageNavigationControls">
      <MemberSignature Language="C#" Value="public bool ShowPageNavigationControls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowPageNavigationControls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the page navigation controls are visible on the toolbar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowParameterPrompts">
      <MemberSignature Language="C#" Value="public bool ShowParameterPrompts { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowParameterPrompts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether parameter prompts are displayed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPrintButton">
      <MemberSignature Language="C#" Value="public bool ShowPrintButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowPrintButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether **Print** button is visible on the toolbar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowPromptAreaButton">
      <MemberSignature Language="C#" Value="public bool ShowPromptAreaButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowPromptAreaButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the button that shows and collapses the prompt area is visible on the split bar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowRefreshButton">
      <MemberSignature Language="C#" Value="public bool ShowRefreshButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowRefreshButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the **Refresh** button is visible.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowReportBody">
      <MemberSignature Language="C#" Value="public bool ShowReportBody { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowReportBody" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the report body is visible on the control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowToolBar">
      <MemberSignature Language="C#" Value="public bool ShowToolBar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowToolBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the toolbar is visible on the control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowWaitControlCancelLink">
      <MemberSignature Language="C#" Value="public bool ShowWaitControlCancelLink { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowWaitControlCancelLink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a `Boolean` value that controls whether to display the **Cancel** link in the wait control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowZoomControl">
      <MemberSignature Language="C#" Value="public bool ShowZoomControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowZoomControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the **Zoom** list box is visible.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeToReportContent">
      <MemberSignature Language="C#" Value="public bool SizeToReportContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SizeToReportContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the **ReportViewer** control should automatically resize to accommodate report content.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.SortEventHandler Sort;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.SortEventHandler Sort" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.SortEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user activates a sort on the report data.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when the user activates a sort on the report data. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.SortEventArgs> object to the <xref:Microsoft.Reporting.WebForms.SortEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitterBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color SplitterBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color SplitterBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "#ECE9D8")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of the document map split bar and the prompt area split bar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmittingDataSourceCredentials">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.ReportCredentialsEventHandler SubmittingDataSourceCredentials;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.ReportCredentialsEventHandler SubmittingDataSourceCredentials" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportCredentialsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user submits new data source credentials using the data source prompt area.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when the user submits data source credentials. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.ReportCredentialsEventArgs> object to the <xref:Microsoft.Reporting.WebForms.ReportCredentialsEventHandler> delegate, which handles the event. This event only applies to remote processing mode.  
  
 Handle this event to read or modify the data source credentials before they are submitted to the report server. For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmittingParameterValues">
      <MemberSignature Language="C#" Value="public event Microsoft.Reporting.WebForms.ReportParametersEventHandler SubmittingParameterValues;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Reporting.WebForms.ReportParametersEventHandler SubmittingParameterValues" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportParametersEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when report parameter values are submitted to the report server.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when the user clicks the **View Report** button or when report parameters are automatically submitted due to dependencies between them. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.ReportParametersEventArgs> object to the <xref:Microsoft.Reporting.WebForms.ReportParametersEventHandler> delegate, which handles the event. This event only applies to remote processing mode.  
  
 Handle this event to read or modify the report parameters before they are submitted to the report server. For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 If you want to prevent parameters from being automatically submitted, subscribe to this event and use the following code. Note that this code does not prevent the **ReportViewer** control from initiating a postback.  
  
```vb  
Private Sub reportViewer1_SubmittingParameterValues(ByVal sender As Object, ByVal e As ReportParametersEventArgs)  
    If e.AutoSubmit Then  
        e.Cancel = True  
    End If  
End Sub  
```  
  
```c#  
void reportViewer1_SubmittingParameterValues(object sender, ReportParametersEventArgs e)  
{  
    if (e.AutoSubmit)  
        e.Cancel = true;  
}  
```  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptControl.GetScriptDescriptors">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;System.Web.UI.ScriptDescriptor&gt; IScriptControl.GetScriptDescriptors ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Web.UI.ScriptDescriptor&gt; System.Web.UI.IScriptControl.GetScriptDescriptors() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.UI.ScriptDescriptor&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a collection of script descriptors that represent ECMAScript (JavaScript) client components.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptControl.GetScriptReferences">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;System.Web.UI.ScriptReference&gt; IScriptControl.GetScriptReferences ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Web.UI.ScriptReference&gt; System.Web.UI.IScriptControl.GetScriptReferences() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Web.UI.ScriptReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a collection of &lt;xref:System.Web.UI.ScriptReference&gt; objects that define script resources that the control requires.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the &lt;xref:System.Web.UI.HtmlTextWriterTag&gt; value that corresponds to the **ReportViewer** control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Toggle">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Toggle;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Toggle" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the user toggles the visibility of an item in the report.</summary>
        <remarks><![CDATA[  
  
## Remarks  
 This event occurs when the user toggles the visibility of an item in the report. Information about this event is passed in a <xref:Microsoft.Reporting.WebForms.ToggleEventArgs> object to the <xref:Microsoft.Reporting.WebForms.ToggleEventHandler> delegate, which handles the event.  
  
 For more information about handling events, see [NIB: Consuming Events](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBarItemBorderColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ToolBarItemBorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ToolBarItemBorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "#336699")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border color of an item on the toolbar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBarItemBorderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.BorderStyle ToolBarItemBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.BorderStyle ToolBarItemBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the border style of an item on the toolbar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBarItemBorderWidth">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Unit ToolBarItemBorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit ToolBarItemBorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.WebControls.Unit), "1px")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the toolbar item border.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBarItemHoverBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ToolBarItemHoverBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ToolBarItemHoverBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "#DDEEF7")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color of toolbar item while the mouse pointer is over the item.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBarItemPressedBorderColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ToolBarItemPressedBorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ToolBarItemPressedBorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "#336699")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The report viewer no longer uses pressed buttons.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is no longer applicable and exists for backward compatibility. **ReportViewer** control no longer uses pressed buttons.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBarItemPressedBorderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.BorderStyle ToolBarItemPressedBorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.BorderStyle ToolBarItemPressedBorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The report viewer no longer uses pressed buttons.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is no longer applicable and exists for backward compatibility. The **ReportViewer** control no longer uses pressed buttons.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBarItemPressedBorderWidth">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Unit ToolBarItemPressedBorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit ToolBarItemPressedBorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.WebControls.Unit), "1px")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The report viewer no longer uses pressed buttons.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is no longer applicable and exists for backward compatibility. The **ReportViewer** control no longer uses pressed buttons.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBarItemPressedHoverBackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ToolBarItemPressedHoverBackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ToolBarItemPressedHoverBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Color), "#99BBE2")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("The report viewer no longer uses pressed buttons.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property is no longer applicable and exists for backward compatibility. The **ReportViewer** control no longer uses pressed buttons.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitControlDisplayAfter">
      <MemberSignature Language="C#" Value="public int WaitControlDisplayAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WaitControlDisplayAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1000)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the delay in milliseconds before the wait control is displayed to the user when the report is loaded.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 When the **ReportViewer** is rendering a report on page load, the wait control is always displayed immediately if <xref:Microsoft.Reporting.WebForms.ReportViewer.AsyncRendering%2A> is set to `true`. If <xref:Microsoft.Reporting.WebForms.ReportViewer.AsyncRendering%2A> is set to `false`, the wait control is not displayed when the Web page is loaded. Once the Web page is loaded, the wait control is always displayed on report actions that cause asynchronous postbacks, and this property specifies the delay in displaying the wait control.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitMessageFont">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.FontInfo WaitMessageFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FontInfo WaitMessageFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FontInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the font for the message that is displayed while the report is being executed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.Unit Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Unit Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Web.UI.WebControls.Unit), "400px")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Unit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the width of the control.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 For more information, see <xref:System.Web.UI.WebControls.WebControl.Width%2A?displayProperty=fullName>.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomMode">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.ZoomMode ZoomMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Reporting.WebForms.ZoomMode ZoomMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ZoomMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the zoom mode of the control.</summary>
        <value>To be added.</value>
        <remarks><![CDATA[  
  
## Remarks  
 The **Zoom** drop-down list contains the following options: 500%, 200%, 150%, 100%, 75%, 50%, 25%, **Page Width** and **Whole Page**.  
  
 ]]></remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomPercent">
      <MemberSignature Language="C#" Value="public int ZoomPercent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ZoomPercent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the zoom percentage to use when displaying the report.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>