<Type Name="ServerReport" FullName="Microsoft.Reporting.WebForms.ServerReport">
  <TypeSignature Language="C#" Value="public sealed class ServerReport : Microsoft.Reporting.WebForms.Report, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ServerReport extends Microsoft.Reporting.WebForms.Report implements class System.Runtime.Serialization.ISerializable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ReportViewer.WebForms</AssemblyName>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Reporting.WebForms.Report</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a report that is processed on the report server.</summary>
    <remarks>
      <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 The ServerReport object serves as a proxy for a report on a report server. It processes reports at the report server, rather than locally. It can open Report Definition Language (RDL) files that have been published to the server, and it can also load a report definition from a <xref:System.IO.Stream> or a <xref:System.IO.TextReader> to the server for remote processing.  
  
 The ServerReport object exposes additional functionality supported by the report server, including parameters and the ability to export reports to any format supported by the report server.  
  
 The ServerReport object requires a [!INCLUDE[ssKatmai](../../../../../../add/includes/sskatmai_md.md)] version of Reporting Services or later.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServerReport ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the &lt;see cref="T:Microsoft.Reporting.WebForms.ServerReport"&gt; class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.ReportViewerCookieCollection Cookies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Reporting.WebForms.ReportViewerCookieCollection Cookies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportViewerCookieCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of &lt;xref:System.Net.Cookie&gt; objects. The &lt;xref:Microsoft.Reporting.WebForms.ServerReport&gt; object uses the cookies in this collection when making server requests.</summary>
        <value>To be added.</value>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 To use custom authentication cookies in server requests, add the custom authentication cookies to this collection property.  
  
 Unlike the behavior of <xref:System.Net.HttpWebRequest>, the <xref:Microsoft.Reporting.WebForms.ServerReport> object does not update this collection with the cookies return by the server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataSources">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.ReportDataSourceInfoCollection GetDataSources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Reporting.WebForms.ReportDataSourceInfoCollection GetDataSources() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportDataSourceInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves information about the data sources used for a report.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns the data source names and user prompt strings of any data sources used in the report that can prompt for credentials.  
  
   
  
## Examples  
  
```c#  
private void button1_Click(object sender, EventArgs e)  
{  
  
   ReportDataSourceInfoCollection rdsic =  
      this.reportViewer1.ServerReport.GetDataSources();  
  
   foreach (ReportDataSourceInfo rdsi in rdsic)  
   {  
      Debug.WriteLine(rdsi.Name + ":" + rdsi.Prompt);  
   }  
}  
```  
  
```vb#  
Private Sub Button2_Click(ByVal sender As System.Object, _  
   ByVal e As System.EventArgs) Handles Button2.Click  
    Dim rdsic As ReportDataSourceInfoCollection = _  
       ReportViewer1.ServerReport.GetDataSources  
  
    For Each rdsi As ReportDataSourceInfo In rdsic  
        Debug.WriteLine(rdsi.Name + ":" + rdsi.Prompt)  
    Next  
  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataSources">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.ReportDataSourceInfoCollection GetDataSources (out bool allCredentialsSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Reporting.WebForms.ReportDataSourceInfoCollection GetDataSources(bool allCredentialsSet) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportDataSourceInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allCredentialsSet" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="allCredentialsSet">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultPageSettings">
      <MemberSignature Language="C#" Value="public override Microsoft.Reporting.WebForms.ReportPageSettings GetDefaultPageSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.Reporting.WebForms.ReportPageSettings GetDefaultPageSettings() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportPageSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the default page settings specified in the report definition.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:Microsoft.Reporting.WebForms.ReportPageSettings> object that is returned can be used to pass page margin and page size information through the `deviceInfo` argument passed to the [M:Microsoft.Reporting.WebForms.ServerReport.Render(System.String,System.String,System.String@,System.String@,System.String@,System.String\[\]@,Microsoft.Reporting.WebForms.Warning\[\]@)](assetId:///M:Microsoft.Reporting.WebForms.ServerReport.Render(System.String,System.String,System.String@,System.String@,System.String@,System.String[]@,Microsoft.Reporting.WebForms.Warning[]@)?qualifyHint=False&autoUpgrade=True) method.  
  
   
  
## Examples  
  
```vb#  
Private Sub Button2_Click(ByVal sender As System.Object, _  
   ByVal e As System.EventArgs) Handles Button2.Click  
   Dim pageSettings As ReportPageSettings  
  
   pageSettings = ReportViewer1.ServerReport.GetDefaultPageSettings  
  
   Debug.WriteLine(pageSettings.Margins.Top)  
   Debug.WriteLine(pageSettings.Margins.Bottom)  
   Debug.WriteLine(pageSettings.Margins.Left)  
   Debug.WriteLine(pageSettings.Margins.Right)  
   Debug.WriteLine(pageSettings.PaperSize.Kind)  
   Debug.WriteLine(pageSettings.PaperSize.RawKind)  
   Debug.WriteLine(pageSettings.PaperSize.PaperName)  
   Debug.WriteLine(pageSettings.PaperSize.Height)  
   Debug.WriteLine(pageSettings.PaperSize.Width)  
  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExecutionId">
      <MemberSignature Language="C#" Value="public string GetExecutionId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetExecutionId() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the current execution ID, or null (`Nothing` in Visual Basic) if no execution ID is available.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 The value returned may be used with the <xref:Microsoft.Reporting.WebForms.ServerReport.SetExecutionId%2A> method in situations where you need to pass a report execution from one **ReportViewer** control to another.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override Microsoft.Reporting.WebForms.ReportParameterInfoCollection GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.Reporting.WebForms.ReportParameterInfoCollection GetParameters() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportParameterInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns report parameter properties for the report.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetParameters method can also be used to validate parameter values against parameters for a report.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServerVersion">
      <MemberSignature Language="C#" Value="public string GetServerVersion ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetServerVersion() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the version of the report server.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Examples  
  
```vb#  
Private Sub Button2_Click(ByVal sender As System.Object, _  
   ByVal e As System.EventArgs) Handles Button2.Click  
    Debug.WriteLine(ReportViewer1.ServerReport.GetServerVersion)  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTotalPages">
      <MemberSignature Language="C#" Value="public override int GetTotalPages (out Microsoft.Reporting.WebForms.PageCountMode pageCountMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetTotalPages(valuetype Microsoft.Reporting.WebForms.PageCountMode pageCountMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageCountMode" Type="Microsoft.Reporting.WebForms.PageCountMode&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pageCountMode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.ReportViewerHeaderCollection Headers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Reporting.WebForms.ReportViewerHeaderCollection Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.ReportViewerHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of strings that contain custom headers.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HistoryId">
      <MemberSignature Language="C#" Value="public string HistoryId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HistoryId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the unique identifier of the report history snapshot used for the server report.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueryExecutionAllowed">
      <MemberSignature Language="C#" Value="public bool IsQueryExecutionAllowed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsQueryExecutionAllowed() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the report can execute queries.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 Returns `false` if executing from a snapshot.  
  
 This may be used to determine if a report can execute queries for report data, or for valid or default values of parameters.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListRenderingExtensions">
      <MemberSignature Language="C#" Value="public override Microsoft.Reporting.WebForms.RenderingExtension[] ListRenderingExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Microsoft.Reporting.WebForms.RenderingExtension[] ListRenderingExtensions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.RenderingExtension[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns all available rendering extensions for the server report.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 This method can be used to populate drop-down lists to allow users to select a rendering extension for export.  
  
   
  
## Examples  
  
```vb#  
Private Sub Button2_Click(ByVal sender As System.Object, _  
     ByVal e As System.EventArgs) Handles Button2.Click  
   Dim extensions As RenderingExtension() = _  
   ReportViewer1.ServerReport.ListRenderingExtensions()  
  
   For Each extension As RenderingExtension In extensions  
   Debug.WriteLine("Extension: " + extension.Name + _  
     " Visible? " + extension.Visible.ToString)  
   Next  
  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadReportDefinition">
      <MemberSignature Language="C#" Value="public override void LoadReportDefinition (System.IO.TextReader report);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void LoadReportDefinition(class System.IO.TextReader report) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="report" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="report">To be added.</param>
        <summary>Loads the report definition on the report server for remote processing using a &lt;xref:System.IO.TextReader&gt;.</summary>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 The LoadReportDefinition method can be used in cases where the report definition is dynamically generated.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the report to be rendered with new data.</summary>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 The Refresh method reprocesses the report and reloads the data from the report data sources.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public System.IO.Stream Render (string format, string deviceInfo, System.Collections.Specialized.NameValueCollection urlAccessParameters, out string mimeType, out string fileNameExtension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream Render(string format, string deviceInfo, class System.Collections.Specialized.NameValueCollection urlAccessParameters, string mimeType, string fileNameExtension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="deviceInfo" Type="System.String" />
        <Parameter Name="urlAccessParameters" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="mimeType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="fileNameExtension" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="deviceInfo">To be added.</param>
        <param name="urlAccessParameters">To be added.</param>
        <param name="mimeType">To be added.</param>
        <param name="fileNameExtension">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public void Render (string format, string deviceInfo, System.Collections.Specialized.NameValueCollection urlAccessParameters, System.IO.Stream reportStream, out string mimeType, out string fileNameExtension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Render(string format, string deviceInfo, class System.Collections.Specialized.NameValueCollection urlAccessParameters, class System.IO.Stream reportStream, string mimeType, string fileNameExtension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="deviceInfo" Type="System.String" />
        <Parameter Name="urlAccessParameters" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="reportStream" Type="System.IO.Stream" />
        <Parameter Name="mimeType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="fileNameExtension" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="deviceInfo">To be added.</param>
        <param name="urlAccessParameters">To be added.</param>
        <param name="reportStream">To be added.</param>
        <param name="mimeType">To be added.</param>
        <param name="fileNameExtension">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public override byte[] Render (string format, string deviceInfo, Microsoft.Reporting.WebForms.PageCountMode pageCountMode, out string mimeType, out string encoding, out string fileNameExtension, out string[] streams, out Microsoft.Reporting.WebForms.Warning[] warnings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] Render(string format, string deviceInfo, valuetype Microsoft.Reporting.WebForms.PageCountMode pageCountMode, string mimeType, string encoding, string fileNameExtension, string[] streams, class Microsoft.Reporting.WebForms.Warning[] warnings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="deviceInfo" Type="System.String" />
        <Parameter Name="pageCountMode" Type="Microsoft.Reporting.WebForms.PageCountMode" />
        <Parameter Name="mimeType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="encoding" Type="System.String&amp;" RefType="out" />
        <Parameter Name="fileNameExtension" Type="System.String&amp;" RefType="out" />
        <Parameter Name="streams" Type="System.String[]&amp;" RefType="out" />
        <Parameter Name="warnings" Type="Microsoft.Reporting.WebForms.Warning[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="deviceInfo">To be added.</param>
        <param name="pageCountMode">To be added.</param>
        <param name="mimeType">To be added.</param>
        <param name="encoding">To be added.</param>
        <param name="fileNameExtension">To be added.</param>
        <param name="streams">To be added.</param>
        <param name="warnings">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderStream">
      <MemberSignature Language="C#" Value="public byte[] RenderStream (string format, string streamId, string deviceInfo, out string mimeType, out string encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] RenderStream(string format, string streamId, string deviceInfo, string mimeType, string encoding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="streamId" Type="System.String" />
        <Parameter Name="deviceInfo" Type="System.String" />
        <Parameter Name="mimeType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="encoding" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="streamId">To be added.</param>
        <param name="deviceInfo">To be added.</param>
        <param name="mimeType">To be added.</param>
        <param name="encoding">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportPath">
      <MemberSignature Language="C#" Value="public string ReportPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReportPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the path to the report on the server.</summary>
        <value>To be added.</value>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Examples  
 For more information and a code example, see [M:Microsoft.Reporting.WebForms.ServerReport.Render(System.String,System.String,System.String@,System.String@,System.String@,System.String\[\]@,Microsoft.Reporting.WebForms.Warning\[\]@)](assetId:///M:Microsoft.Reporting.WebForms.ServerReport.Render(System.String,System.String,System.String@,System.String@,System.String@,System.String[]@,Microsoft.Reporting.WebForms.Warning[]@)?qualifyHint=False&autoUpgrade=True).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportServerCredentials">
      <MemberSignature Language="C#" Value="public Microsoft.Reporting.WebForms.IReportServerCredentials ReportServerCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Reporting.WebForms.IReportServerCredentials ReportServerCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Reporting.WebForms.IReportServerCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the credentials to be used with the report server.</summary>
        <value>To be added.</value>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Examples  
 For more information and a code example, see <xref:Microsoft.Reporting.WebForms.ReportServerCredentials>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportServerUrl">
      <MemberSignature Language="C#" Value="public Uri ReportServerUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ReportServerUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Uri), "http://localhost/reportserver")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the URL for the report server.</summary>
        <value>To be added.</value>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Examples  
 Please see [M:Microsoft.Reporting.WebForms.ServerReport.Render(System.String,System.String,System.String@,System.String@,System.String@,System.String\[\]@,Microsoft.Reporting.WebForms.Warning\[\]@)](assetId:///M:Microsoft.Reporting.WebForms.ServerReport.Render(System.String,System.String,System.String@,System.String@,System.String@,System.String[]@,Microsoft.Reporting.WebForms.Warning[]@)?qualifyHint=False&autoUpgrade=True) for a code example.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDataSourceCredentials">
      <MemberSignature Language="C#" Value="public void SetDataSourceCredentials (System.Collections.Generic.IEnumerable&lt;Microsoft.Reporting.WebForms.DataSourceCredentials&gt; credentials);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDataSourceCredentials(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Reporting.WebForms.DataSourceCredentials&gt; credentials) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentials" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Reporting.WebForms.DataSourceCredentials&gt;" />
      </Parameters>
      <Docs>
        <param name="credentials">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExecutionId">
      <MemberSignature Language="C#" Value="public void SetExecutionId (string executionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExecutionId(string executionId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="executionId">To be added.</param>
        <summary>Initializes a server report using a specific report execution on the server.</summary>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 This method may set the <xref:Microsoft.Reporting.WebForms.ServerReport.ReportPath%2A> and <xref:Microsoft.Reporting.WebForms.ServerReport.HistoryId%2A> properties of the <xref:Microsoft.Reporting.WebForms.ServerReport>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public override void SetParameters (System.Collections.Generic.IEnumerable&lt;Microsoft.Reporting.WebForms.ReportParameter&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetParameters(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Reporting.WebForms.ReportParameter&gt; parameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Reporting.WebForms.ReportParameter&gt;" />
      </Parameters>
      <Docs>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(600000)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.WebControls.WebParts.WebBrowsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of milliseconds to wait for server communications.</summary>
        <value>To be added.</value>
        <remarks>
          <format Type="text/markdown"><![CDATA[  
  
## Remarks  
 A value of <xref:System.Threading.Timeout.Infinite> means that there is no time-out period.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>