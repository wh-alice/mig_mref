<Type Name="IReportServerConnection2" FullName="Microsoft.Reporting.WebForms.IReportServerConnection2">
  <TypeSignature Language="C#" Value="public interface IReportServerConnection2 : Microsoft.Reporting.WebForms.IReportServerConnection" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReportServerConnection2 implements class Microsoft.Reporting.WebForms.IReportServerConnection, class Microsoft.Reporting.WebForms.IReportServerCredentials" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ReportViewer.WebForms</AssemblyName>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Reporting.WebForms.IReportServerConnection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides report server connection information when the **ReportViewer** Web forms control is used with no session state.</summary>
    <remarks>&lt;!CDATA[  
  
## Remarks  
 When an implementation of the IReportServerConnection2 interface is specified in the Web.config settings, the values for the &lt;xref:Microsoft.Reporting.WebForms.ServerReport.ReportServerUrl%2A&gt;, &lt;xref:Microsoft.Reporting.WebForms.ServerReport.Timeout%2A&gt;, &lt;xref:Microsoft.Reporting.WebForms.ServerReport.Cookies%2A&gt; and &lt;xref:Microsoft.Reporting.WebForms.ServerReport.Headers%2A&gt; properties on the &lt;xref:Microsoft.Reporting.WebForms.ServerReport&gt; instance will not be used. The values provided by the IReportServerConnection2 implementation will be used instead. In addition to these properties, the credential information that is provided by the IReportServerConnection2 implementation will also be used.  
  
 For more information about how to specify connections with the &lt;xref:Microsoft.Reporting.WebForms.ReportViewer&gt; control, see [Specifying Connections and Credentials for the ReportViewer Web Server Control](../Topic/Specifying%20Connections%20and%20Credentials%20for%20the%20ReportViewer%20Web%20Server%20Control.md).  
  
 For more information about the `ReportViewerServerConnection` Web.config setting, see [Web.config Settings for ReportViewer](../Topic/Web.config%20Settings%20for%20ReportViewer.md).  
  
   
  
## Examples  
 The following example provides an implementation of IReportServerConnection2 interface that retrieves the report server URL and credential information from the Web.config file.  
  
 Before using the example, five key/value pairs must be added to the application's Web.config file in the `appSettings` block: `ReportViewerServerConnection`, `MyReportViewerUser`, `MyReportViewerPassword`, `MyReportViewerDomain`, and `MyReportServerUrl`, where the values correspond to the user name, password, and domain for connecting to the report server, and the URL of the report server. The `ReportViewerServerConnection` value must be set to the fully qualified assembly name for the implementation of the IReportServerConnection2 class.  
  
 For more information about the Web.config `ReportViewerServerConnection` setting, see [Web.config Settings for ReportViewer](../Topic/Web.config%20Settings%20for%20ReportViewer.md).  
  
```c#  
public sealed class MyReportServerConnection : IReportServerConnection2  
{  
    public WindowsIdentity ImpersonationUser  
    {  
        get  
        {  
            // Use the default Windows user.  Credentials will be  
            // provided by the NetworkCredentials property.  
            return null;  
        }  
    }  
  
    public ICredentials NetworkCredentials  
    {  
        get  
        {  
            // Read the user information from the web.config file.    
            // By reading the information on demand instead of   
            // storing it, the credentials will not be stored in   
            // session, reducing the vulnerable surface area to the  
            // web.config file, which can be secured with an ACL.  
  
            // User name  
            string userName =  
                ConfigurationManager.AppSettings  
                    ["MyReportViewerUser"];  
  
            if (string.IsNullOrEmpty(userName))  
                throw new Exception(  
                    "Missing user name from Web.config file");  
  
            // Password  
            string password =  
                ConfigurationManager.AppSettings  
                    ["MyReportViewerPassword"];  
  
            if (string.IsNullOrEmpty(password))  
                throw new Exception(  
                    "Missing password from Web.config file");  
  
            // Domain  
            string domain =  
                ConfigurationManager.AppSettings  
                    ["MyReportViewerDomain"];  
  
            if (string.IsNullOrEmpty(domain))  
                throw new Exception(  
                    "Missing domain from Web.config file");  
  
            return new NetworkCredential(userName, password, domain);  
        }  
    }  
  
    public bool GetFormsCredentials(out Cookie authCookie,  
                out string userName, out string password,  
                out string authority)  
    {  
        authCookie = null;  
        userName = null;  
        password = null;  
        authority = null;  
  
        // Not using form credentials  
        return false;  
    }  
  
    public Uri ReportServerUrl  
    {  
        get  
        {  
            string url =   
                ConfigurationManager.AppSettings[  
                    "MyReportServerUrl"];  
  
            if (string.IsNullOrEmpty(url))  
                throw new Exception(  
                    "Missing url from the Web.config file");  
  
            return new Uri(url);  
        }  
    }  
  
    public int Timeout  
    {  
        get  
        {  
            return 60000; // 60 seconds  
        }  
    }  
  
    public IEnumerable&lt;Cookie&gt; Cookies  
    {  
        get  
        {  
            // No custom cookies  
            return null;  
        }  
    }  
  
    public IEnumerable&lt;string&gt; Headers  
    {  
        get  
        {  
            // No custom headers  
            return null;  
        }  
    }  
}  
```  
  
```vb#  
Public NotInheritable Class MyReportServerConnection  
    Implements IReportServerConnection2  
  
    Public ReadOnly Property ImpersonationUser() As WindowsIdentity _  
            Implements IReportServerConnection2.ImpersonationUser  
        Get  
  
            'Use the default Windows user.  Credentials will be  
            'provided by the NetworkCredentials property.  
            Return Nothing  
  
        End Get  
    End Property  
  
    Public ReadOnly Property NetworkCredentials() As ICredentials _  
            Implements IReportServerConnection2.NetworkCredentials  
        Get  
  
            'Read the user information from the web.config file.    
            'By reading the information on demand instead of storing   
            'it, the credentials will not be stored in session,   
            'reducing the vulnerable surface area to the web.config   
            'file, which can be secured with an ACL.  
  
            'User name  
            Dim userName As String = _  
                ConfigurationManager.AppSettings("MyReportViewerUser")  
  
            If (String.IsNullOrEmpty(userName)) Then  
                Throw New Exception("Missing user name from web.config file")  
            End If  
  
            'Password  
            Dim password As String = _  
                ConfigurationManager.AppSettings("MyReportViewerPassword")  
  
            If (String.IsNullOrEmpty(password)) Then  
                Throw New Exception("Missing password from web.config file")  
            End If  
  
            'Domain  
            Dim domain As String = _  
                ConfigurationManager.AppSettings("MyReportViewerDomain")  
  
            If (String.IsNullOrEmpty(domain)) Then  
                Throw New Exception("Missing domain from web.config file")  
            End If  
  
            Return New NetworkCredential(userName, password, domain)  
  
        End Get  
    End Property  
  
    Public Function GetFormsCredentials(ByRef authCookie As Cookie, _  
                                        ByRef userName As String, _  
                                        ByRef password As String, _  
                                        ByRef authority As String) _  
                                        As Boolean _  
            Implements IReportServerConnection2.GetFormsCredentials  
  
        authCookie = Nothing  
        userName = Nothing  
        password = Nothing  
        authority = Nothing  
  
        'Not using form credentials  
        Return False  
  
    End Function  
  
    Public ReadOnly Property ReportServerUrl() As Uri   
           Implements IReportServerConnection2.ReportServerUrl  
        Get  
            Dim url As String = ConfigurationManager.AppSettings("MyReportViewerUrl")  
            If (String.IsNullOrEmpty(url)) Then  
                Throw New Exception("Missing url from the web.config file")  
            End If  
  
            Return New Uri(url)  
  
        End Get  
    End Property  
  
    Public ReadOnly Property Timeout() As Integer Implements IReportServerConnection2.Timeout  
        Get  
            Return 60000 '60 seconds  
        End Get  
    End Property  
  
    Public ReadOnly Property Cookies() As IEnumerable(Of Cookie) Implements IReportServerConnection2.Cookies  
        Get  
            Return Nothing  
        End Get  
    End Property  
  
    Public ReadOnly Property Headers() As IEnumerable(Of String) Implements IReportServerConnection2.Headers  
        Get  
            Return Nothing  
        End Get  
    End Property  
  
End Class  
```  
  
 ]&gt;</remarks>
  </Docs>
  <Members>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Net.Cookie&gt; Cookies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Net.Cookie&gt; Cookies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Net.Cookie&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of custom cookies to send to the report server.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; Headers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of custom headers to send to the report server.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>