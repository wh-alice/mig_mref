<Type Name="IReportServerCredentials" FullName="Microsoft.Reporting.WebForms.IReportServerCredentials">
  <TypeSignature Language="C#" Value="public interface IReportServerCredentials" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReportServerCredentials" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ReportViewer.WebForms</AssemblyName>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Allows applications to provide credentials for connecting to a Reporting Services report server.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 When implementing the IReportServerCredentials interface, it is important know that the <xref:Microsoft.Reporting.WebForms.ReportViewer> control stores the instance of the object in ASP.NET session. If the server's ASP.NET session is being stored out of process, such as in Reporting Services, the class must be marked `Serializable` so that it may be serialized for storage.  
  
 Although it is not required, it is also a good practice to implement the IReportServerCredentials interface as a stateless object. This prevents the credential information, such as user name and password, from being stored when the object is serialized.  
  
 For more information about how to specify credentials with the <xref:Microsoft.Reporting.WebForms.ReportViewer> control, see [Specifying Connections and Credentials for the ReportViewer Web Server Control](../Topic/Specifying%20Connections%20and%20Credentials%20for%20the%20ReportViewer%20Web%20Server%20Control.md).  
  
   
  
## Examples  
 The following example provides an implementation of IReportServerCredentials that is marked `Serializable` so that it can be serialized for storage. The credential information is retrieved from the Web.config file. This implementation will connect to the report server with the same credentials for all client requests.  
  
 Before using the example, three key value pairs must be added to the application's Web.config file in the `appSettings` block: `MyReportViewerUser`, `MyReportViewerPassword`, and `MyReportViewerDomain`. These values correspond to the user name, password, and domain that will be used to connect to the report server.  
  
```c#  
using System;  
using System.Data;  
using System.Configuration;  
using System.Net;  
using System.Security.Principal;  
using System.Web;  
using System.Web.Security;  
using System.Web.UI;  
using System.Web.UI.WebControls;  
using System.Web.UI.WebControls.WebParts;  
using System.Web.UI.HtmlControls;  
using Microsoft.Reporting.WebForms;  
  
public partial class _Default : System.Web.UI.Page   
{  
    protected void Page_Init(object sender, EventArgs e)  
    {  
        ReportViewer1.ServerReport.ReportServerCredentials =   
            new MyReportServerCredentials();  
    }  
}  
  
[Serializable]  
public sealed class MyReportServerCredentials :   
    IReportServerCredentials  
{  
    public WindowsIdentity ImpersonationUser  
    {  
        get  
        {  
            // Use the default Windows user.  Credentials will be  
            // provided by the NetworkCredentials property.  
            return null;  
        }  
    }  
  
    public ICredentials NetworkCredentials  
    {  
        get  
        {  
            // Read the user information from the Web.config file.    
            // By reading the information on demand instead of   
            // storing it, the credentials will not be stored in   
            // session, reducing the vulnerable surface area to the  
            // Web.config file, which can be secured with an ACL.  
  
            // User name  
            string userName =   
                ConfigurationManager.AppSettings  
                    ["MyReportViewerUser"];  
  
            if (string.IsNullOrEmpty(userName))  
                throw new Exception(  
                    "Missing user name from web.config file");  
  
            // Password  
            string password =   
                ConfigurationManager.AppSettings  
                    ["MyReportViewerPassword"];  
  
            if (string.IsNullOrEmpty(password))  
                throw new Exception(  
                    "Missing password from web.config file");  
  
            // Domain  
            string domain =   
                ConfigurationManager.AppSettings  
                    ["MyReportViewerDomain"];  
  
            if (string.IsNullOrEmpty(domain))  
                throw new Exception(  
                    "Missing domain from web.config file");  
  
            return new NetworkCredential(userName, password, domain);  
        }  
    }  
  
    public bool GetFormsCredentials(out Cookie authCookie,   
                out string userName, out string password,   
                out string authority)  
    {  
        authCookie = null;  
        userName = null;  
        password = null;  
        authority = null;  
  
        // Not using form credentials  
        return false;  
    }  
}  
```  
  
```vb#  
Imports System.Net  
Imports System.Security.Principal  
Imports Microsoft.Reporting.WebForms  
  
Partial Class _Default  
    Inherits System.Web.UI.Page  
  
    Protected Sub Page_Init(ByVal sender As Object, _  
                            ByVal e As System.EventArgs) _  
                            Handles Me.Init  
  
        ReportViewer1.ServerReport.ReportServerCredentials = _  
            New MyReportServerCredentials()  
  
    End Sub  
  
End Class  
  
<Serializable()> _  
Public NotInheritable Class MyReportServerCredentials  
    Implements IReportServerCredentials  
  
    Public ReadOnly Property ImpersonationUser() As WindowsIdentity _  
            Implements IReportServerCredentials.ImpersonationUser  
        Get  
  
            'Use the default windows user.  Credentials will be  
            'provided by the NetworkCredentials property.  
            Return Nothing  
  
        End Get  
    End Property  
  
    Public ReadOnly Property NetworkCredentials() As ICredentials _  
            Implements IReportServerCredentials.NetworkCredentials  
        Get  
  
            'Read the user information from the web.config file.    
            'By reading the information on demand instead of storing   
            'it, the credentials will not be stored in session,   
            'reducing the vulnerable surface area to the web.config   
            'file, which can be secured with an ACL.  
  
            'User name  
            Dim userName As String = _  
                ConfigurationManager.AppSettings("MyReportViewerUser")  
  
            If (String.IsNullOrEmpty(userName)) Then  
                Throw New Exception("Missing user name from web.config file")  
            End If  
  
            'Password  
            Dim password As String = _  
                ConfigurationManager.AppSettings("MyReportViewerPassword")  
  
            If (String.IsNullOrEmpty(password)) Then  
                Throw New Exception("Missing password from web.config file")  
            End If  
  
            'Domain  
            Dim domain As String = _  
                ConfigurationManager.AppSettings("MyReportViewerDomain")  
  
            If (String.IsNullOrEmpty(domain)) Then  
                Throw New Exception("Missing domain from web.config file")  
            End If  
  
            Return New NetworkCredential(userName, password, domain)  
  
        End Get  
    End Property  
  
    Public Function GetFormsCredentials(ByRef authCookie As Cookie, _  
                                        ByRef userName As String, _  
                                        ByRef password As String, _  
                                        ByRef authority As String) _  
                                        As Boolean _  
            Implements IReportServerCredentials.GetFormsCredentials  
  
        authCookie = Nothing  
        userName = Nothing  
        password = Nothing  
        authority = Nothing  
  
        'Not using form credentials  
        Return False  
  
    End Function  
  
End Class  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetFormsCredentials">
      <MemberSignature Language="C#" Value="public bool GetFormsCredentials (out System.Net.Cookie authCookie, out string userName, out string password, out string authority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetFormsCredentials(class System.Net.Cookie authCookie, string userName, string password, string authority) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authCookie" Type="System.Net.Cookie&amp;" RefType="out" />
        <Parameter Name="userName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="password" Type="System.String&amp;" RefType="out" />
        <Parameter Name="authority" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="authCookie">To be added.</param>
        <param name="userName">To be added.</param>
        <param name="password">To be added.</param>
        <param name="authority">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationUser">
      <MemberSignature Language="C#" Value="public System.Security.Principal.WindowsIdentity ImpersonationUser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.WindowsIdentity ImpersonationUser" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the &lt;xref:System.Security.Principal.WindowsIdentity?displayProperty=fullName&gt; of the user to impersonate when the &lt;xref:Microsoft.Reporting.WebForms.ReportViewer&gt; control connects to a report server.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkCredentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials NetworkCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials NetworkCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the network credentials that are used for authentication with the report server.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>